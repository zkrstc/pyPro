{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, toRef, computed, reactive, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, unref, createBlock, withCtx, renderSlot, createElementVNode, Fragment } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport useMenu from './use-menu.mjs';\nimport { menuItemProps, menuItemEmits } from './menu-item2.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst COMPONENT_NAME = \"ElMenuItem\";\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: menuItemProps,\n  emits: menuItemEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const instance = getCurrentInstance();\n    const rootMenu = inject(\"rootMenu\");\n    const nsMenu = useNamespace(\"menu\");\n    const nsMenuItem = useNamespace(\"menu-item\");\n    if (!rootMenu) throwError(COMPONENT_NAME, \"can not inject root menu\");\n    const {\n      parentMenu,\n      indexPath\n    } = useMenu(instance, toRef(props, \"index\"));\n    const subMenu = inject(`subMenu:${parentMenu.value.uid}`);\n    if (!subMenu) throwError(COMPONENT_NAME, \"can not inject sub menu\");\n    const active = computed(() => props.index === rootMenu.activeIndex);\n    const item = reactive({\n      index: props.index,\n      indexPath,\n      active\n    });\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route\n        });\n        emit(\"click\", item);\n      }\n    };\n    onMounted(() => {\n      subMenu.addSubMenu(item);\n      rootMenu.addMenuItem(item);\n    });\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item);\n      rootMenu.removeMenuItem(item);\n    });\n    expose({\n      parentMenu,\n      rootMenu,\n      active,\n      nsMenu,\n      nsMenuItem,\n      handleClick\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"li\", {\n        class: normalizeClass([unref(nsMenuItem).b(), unref(nsMenuItem).is(\"active\", unref(active)), unref(nsMenuItem).is(\"disabled\", _ctx.disabled)]),\n        role: \"menuitem\",\n        tabindex: \"-1\",\n        onClick: handleClick\n      }, [unref(parentMenu).type.name === \"ElMenu\" && unref(rootMenu).props.collapse && _ctx.$slots.title ? (openBlock(), createBlock(unref(ElTooltip), {\n        key: 0,\n        effect: unref(rootMenu).props.popperEffect,\n        placement: \"right\",\n        \"fallback-placements\": [\"left\"],\n        persistent: unref(rootMenu).props.persistent\n      }, {\n        content: withCtx(() => [renderSlot(_ctx.$slots, \"title\")]),\n        default: withCtx(() => [createElementVNode(\"div\", {\n          class: normalizeClass(unref(nsMenu).be(\"tooltip\", \"trigger\"))\n        }, [renderSlot(_ctx.$slots, \"default\")], 2)]),\n        _: 3\n      }, 8, [\"effect\", \"persistent\"])) : (openBlock(), createElementBlock(Fragment, {\n        key: 1\n      }, [renderSlot(_ctx.$slots, \"default\"), renderSlot(_ctx.$slots, \"title\")], 64))], 2);\n    };\n  }\n});\nvar MenuItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"menu-item.vue\"]]);\nexport { MenuItem as default };","map":{"version":3,"names":["name","COMPONENT_NAME","instance","getCurrentInstance","rootMenu","inject","nsMenu","useNamespace","nsMenuItem","throwError","parentMenu","indexPath","useMenu","toRef","props","subMenu","value","uid","active","computed","index","activeIndex","item","reactive","handleClick","disabled","handleMenuItemClick","route","emit","onMounted","addSubMenu","addMenuItem","onBeforeUnmount","removeSubMenu","removeMenuItem","expose"],"sources":["../../../../../../packages/components/menu/src/menu-item.vue"],"sourcesContent":["<template>\n  <li\n    :class=\"[\n      nsMenuItem.b(),\n      nsMenuItem.is('active', active),\n      nsMenuItem.is('disabled', disabled),\n    ]\"\n    role=\"menuitem\"\n    tabindex=\"-1\"\n    @click=\"handleClick\"\n  >\n    <el-tooltip\n      v-if=\"\n        parentMenu.type.name === 'ElMenu' &&\n        rootMenu.props.collapse &&\n        $slots.title\n      \"\n      :effect=\"rootMenu.props.popperEffect\"\n      placement=\"right\"\n      :fallback-placements=\"['left']\"\n      :persistent=\"rootMenu.props.persistent\"\n    >\n      <template #content>\n        <slot name=\"title\" />\n      </template>\n      <div :class=\"nsMenu.be('tooltip', 'trigger')\">\n        <slot />\n      </div>\n    </el-tooltip>\n    <template v-else>\n      <slot />\n      <slot name=\"title\" />\n    </template>\n  </li>\n</template>\n\n<script lang=\"ts\" setup>\n// @ts-nocheck\nimport {\n  computed,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  toRef,\n} from 'vue'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport useMenu from './use-menu'\nimport { menuItemEmits, menuItemProps } from './menu-item'\n\nimport type { MenuItemRegistered, MenuProvider, SubMenuProvider } from './types'\n\nconst COMPONENT_NAME = 'ElMenuItem'\ndefineOptions({\n  name: COMPONENT_NAME,\n})\nconst props = defineProps(menuItemProps)\nconst emit = defineEmits(menuItemEmits)\n\nconst instance = getCurrentInstance()!\nconst rootMenu = inject<MenuProvider>('rootMenu')\nconst nsMenu = useNamespace('menu')\nconst nsMenuItem = useNamespace('menu-item')\nif (!rootMenu) throwError(COMPONENT_NAME, 'can not inject root menu')\n\nconst { parentMenu, indexPath } = useMenu(instance, toRef(props, 'index'))\n\nconst subMenu = inject<SubMenuProvider>(`subMenu:${parentMenu.value.uid}`)\nif (!subMenu) throwError(COMPONENT_NAME, 'can not inject sub menu')\n\nconst active = computed(() => props.index === rootMenu.activeIndex)\nconst item: MenuItemRegistered = reactive({\n  index: props.index,\n  indexPath,\n  active,\n})\n\nconst handleClick = () => {\n  if (!props.disabled) {\n    rootMenu.handleMenuItemClick({\n      index: props.index,\n      indexPath: indexPath.value,\n      route: props.route,\n    })\n    emit('click', item)\n  }\n}\n\nonMounted(() => {\n  subMenu.addSubMenu(item)\n  rootMenu.addMenuItem(item)\n})\n\nonBeforeUnmount(() => {\n  subMenu.removeSubMenu(item)\n  rootMenu.removeMenuItem(item)\n})\n\ndefineExpose({\n  parentMenu,\n  rootMenu,\n  active,\n  nsMenu,\n  nsMenuItem,\n  handleClick,\n})\n</script>\n"],"mappings":";;;;;;;;mCAwDc;EACZA,IAAM,EAAAC;AACR;;;;;;;;;;IAIA,MAAMC,QAAA,GAAWC,kBAAmB;IAC9B,MAAAC,QAAA,GAAWC,MAAA,CAAqB,UAAU;IAC1C,MAAAC,MAAA,GAASC,YAAA,CAAa,MAAM;IAC5B,MAAAC,UAAA,GAAaD,YAAA,CAAa,WAAW;IAC3C,IAAI,CAACH,QAAA,EAECK,UAAA,CAAAR,cAAwB,4BAAsB;IAEpD,MAAM;MAAAS,UAAkC;MAAAC;IAAA,IAAWC,OAAW,CAAAV,QAAA,EAAAW,KAAW,CAAAC,KAAA;IACzE,MAAKC,OAAS,GAAWV,MAAA,YAAAK,UAAyC,CAAAM,KAAA,CAAAC,GAAA;IAElE,KAAAF,OAAA,EACAN,UAAA,CAAiCR,cAAS;IAAA,MAAAiB,MAC3B,GAAAC,QAAA,OAAAL,KAAA,CAAAM,KAAA,KAAAhB,QAAA,CAAAiB,WAAA;IACb,MAAAC,IAAA,GAAAC,QAAA;MACAH,KAAA,EAAAN,KAAA,CAAAM,KAAA;MACDT,SAAA;MAEDO;IACE,CAAI;IACF,MAAAM,WAA6B,GAAAA,CAAA;MAAA,IAC3B,CAAAV,KAAA,CAAOW,QAAM;QAAArB,QAAA,CAAAsB,mBACQ;UACrBN,KAAA,EAAON,KAAM,CAAAM,KAAA;UACdT,SAAA,EAAAA,SAAA,CAAAK,KAAA;UACDW,KAAA,EAAAb,KAAc,CAAIa;QAAA,CACpB;QACFC,IAAA,UAAAN,IAAA;MAEA;IACE;IACAO,SAAA;MACDd,OAAA,CAAAe,UAAA,CAAAR,IAAA;MAEDlB,QAAA,CAAA2B,WAAsB,CAAAT,IAAA;IACpB;IACAU,eAAA;MACDjB,OAAA,CAAAkB,aAAA,CAAAX,IAAA;MAEYlB,QAAA,CAAA8B,cAAA,CAAAZ,IAAA;IAAA,CACX;IACAa,MAAA;MACAzB,UAAA;MACAN,QAAA;MACAc,MAAA;MACAZ,MAAA;MACDE,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}