{"ast":null,"code":"import { defineComponent, inject, h, renderSlot } from 'vue';\nimport { ElText } from '../../text/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _sfc_main = defineComponent({\n  name: \"ElTreeNodeContent\",\n  props: {\n    node: {\n      type: Object,\n      required: true\n    },\n    renderContent: Function\n  },\n  setup(props) {\n    const ns = useNamespace(\"tree\");\n    const nodeInstance = inject(\"NodeInstance\");\n    const tree = inject(\"RootTree\");\n    return () => {\n      const node = props.node;\n      const {\n        data,\n        store\n      } = node;\n      return props.renderContent ? props.renderContent(h, {\n        _self: nodeInstance,\n        node,\n        data,\n        store\n      }) : renderSlot(tree.ctx.slots, \"default\", {\n        node,\n        data\n      }, () => [h(ElText, {\n        tag: \"span\",\n        truncated: true,\n        class: ns.be(\"node\", \"label\")\n      }, () => [node.label])]);\n    };\n  }\n});\nvar NodeContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"tree-node-content.vue\"]]);\nexport { NodeContent as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","props","node","type","Object","required","renderContent","Function","setup","ns","useNamespace","nodeInstance","inject","tree","data","store","h","_self","renderSlot","ctx","slots","ElText","tag","truncated","class","be","label","NodeContent","_export_sfc"],"sources":["../../../../../../packages/components/tree/src/tree-node-content.vue"],"sourcesContent":["<script lang=\"ts\">\nimport { defineComponent, h, inject, renderSlot } from 'vue'\nimport ElText from '@element-plus/components/text'\n\nimport { useNamespace } from '@element-plus/hooks'\nimport type { ComponentInternalInstance } from 'vue'\nimport type { RootTreeType } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNodeContent',\n  props: {\n    node: {\n      type: Object,\n      required: true,\n    },\n    renderContent: Function,\n  },\n  setup(props) {\n    const ns = useNamespace('tree')\n    const nodeInstance = inject<ComponentInternalInstance>('NodeInstance')\n    const tree = inject<RootTreeType>('RootTree')!\n    return () => {\n      const node = props.node\n      const { data, store } = node\n      return props.renderContent\n        ? props.renderContent(h, { _self: nodeInstance, node, data, store })\n        : renderSlot(tree.ctx.slots, 'default', { node, data }, () => [\n            h(\n              ElText,\n              { tag: 'span', truncated: true, class: ns.be('node', 'label') },\n              () => [node.label]\n            ),\n          ])\n    }\n  },\n})\n</script>\n"],"mappings":";;;;AAQA,MAAKA,SAAA,GAAaC,eAAa;EAC7BC,IAAM;EACNC,KAAO;IACLC,IAAM;MACJC,IAAM,EAAAC,MAAA;MACNC,QAAU;IAAA,CACZ;IACAC,aAAe,EAAAC;EAAA,CACjB;EACAC,MAAMP,KAAO;IACL,MAAAQ,EAAA,GAAKC,YAAA,CAAa,MAAM;IACxB,MAAAC,YAAA,GAAeC,MAAA,CAAkC,cAAc;IAC/D,MAAAC,IAAA,GAAOD,MAAA,CAAqB,UAAU;IAC5C,OAAO,MAAM;MACX,MAAMV,IAAA,GAAOD,KAAM,CAAAC,IAAA;MACb;QAAEY,IAAM;QAAAC;MAAA,CAAU,GAAAb,IAAA;MACjB,OAAAD,KAAA,CAAMK,aAAA,GACTL,KAAM,CAAAK,aAAA,CAAcU,CAAA,EAAG;QAAEC,KAAA,EAAON,YAAc;QAAAT,IAAA;QAAMY,IAAM;QAAAC;MAAA,CAAO,CACjE,GAAAG,UAAA,CAAWL,IAAA,CAAKM,GAAI,CAAAC,KAAA,EAAO,WAAW;QAAElB,IAAA;QAAMY;MAAK,GAAG,MAAM,CAC1DE,CAAA,CAAAK,MAAA;QAAAC,GAAA;QAAAC,SAAA;QAAAC,KAAA,EAAAf,EAAA,CAAAgB,EAAA;MAAA,UAAAvB,IAAA,CAAAwB,KAAA,GACE;IAAA,CACA;EAA8D;AAC7C,CACnB;AACD,IAAAC,WAAA,GACP,eAAAC,WAAA,CAAA9B,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}