{"ast":null,"code":"import { defineComponent, reactive, computed, toRefs, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, createVNode, withCtx, createElementVNode, toDisplayString } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { sliderButtonProps, sliderButtonEmits } from './button.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useSliderButton } from './composables/use-slider-button.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst __default__ = defineComponent({\n  name: \"ElSliderButton\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: sliderButtonProps,\n  emits: sliderButtonEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"slider\");\n    const initData = reactive({\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: 0,\n      oldValue: props.modelValue\n    });\n    const tooltipPersistent = computed(() => !showTooltip.value ? false : persistent.value);\n    const {\n      disabled,\n      button,\n      tooltip,\n      showTooltip,\n      persistent,\n      tooltipVisible,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition\n    } = useSliderButton(props, initData, emit);\n    const {\n      hovering,\n      dragging\n    } = toRefs(initData);\n    expose({\n      onButtonDown,\n      onKeyDown,\n      setPosition,\n      hovering,\n      dragging\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"button\",\n        ref: button,\n        class: normalizeClass([unref(ns).e(\"button-wrapper\"), {\n          hover: unref(hovering),\n          dragging: unref(dragging)\n        }]),\n        style: normalizeStyle(unref(wrapperStyle)),\n        tabindex: unref(disabled) ? -1 : 0,\n        onMouseenter: unref(handleMouseEnter),\n        onMouseleave: unref(handleMouseLeave),\n        onMousedown: unref(onButtonDown),\n        onFocus: unref(handleMouseEnter),\n        onBlur: unref(handleMouseLeave),\n        onKeydown: unref(onKeyDown)\n      }, [createVNode(unref(ElTooltip), {\n        ref_key: \"tooltip\",\n        ref: tooltip,\n        visible: unref(tooltipVisible),\n        placement: _ctx.placement,\n        \"fallback-placements\": [\"top\", \"bottom\", \"right\", \"left\"],\n        \"stop-popper-mouse-event\": false,\n        \"popper-class\": _ctx.tooltipClass,\n        disabled: !unref(showTooltip),\n        persistent: unref(tooltipPersistent)\n      }, {\n        content: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(unref(formatValue)), 1)]),\n        default: withCtx(() => [createElementVNode(\"div\", {\n          class: normalizeClass([unref(ns).e(\"button\"), {\n            hover: unref(hovering),\n            dragging: unref(dragging)\n          }])\n        }, null, 2)]),\n        _: 1\n      }, 8, [\"visible\", \"placement\", \"popper-class\", \"disabled\", \"persistent\"])], 46, [\"tabindex\", \"onMouseenter\", \"onMouseleave\", \"onMousedown\", \"onFocus\", \"onBlur\", \"onKeydown\"]);\n    };\n  }\n});\nvar SliderButton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"button.vue\"]]);\nexport { SliderButton as default };","map":{"version":3,"names":["name","ns","useNamespace","initData","reactive","hovering","dragging","isClick","startX","currentX","startY","currentY","startPosition","newPosition","oldValue","props","modelValue","tooltipPersistent","computed","showTooltip","value","persistent","disabled","button","tooltip","tooltipVisible","wrapperStyle","formatValue","handleMouseEnter","handleMouseLeave","onButtonDown","onKeyDown","setPosition","useSliderButton","emit","toRefs","expose","_ctx","_cache","openBlock","createElementBlock"],"sources":["../../../../../../packages/components/slider/src/button.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"button\"\n    :class=\"[ns.e('button-wrapper'), { hover: hovering, dragging }]\"\n    :style=\"wrapperStyle\"\n    :tabindex=\"disabled ? -1 : 0\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n    @mousedown=\"onButtonDown\"\n    @focus=\"handleMouseEnter\"\n    @blur=\"handleMouseLeave\"\n    @keydown=\"onKeyDown\"\n  >\n    <el-tooltip\n      ref=\"tooltip\"\n      :visible=\"tooltipVisible\"\n      :placement=\"placement\"\n      :fallback-placements=\"['top', 'bottom', 'right', 'left']\"\n      :stop-popper-mouse-event=\"false\"\n      :popper-class=\"tooltipClass\"\n      :disabled=\"!showTooltip\"\n      :persistent=\"tooltipPersistent\"\n    >\n      <template #content>\n        <span>{{ formatValue }}</span>\n      </template>\n      <div :class=\"[ns.e('button'), { hover: hovering, dragging }]\" />\n    </el-tooltip>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, reactive, toRefs } from 'vue'\nimport { ElTooltip } from '@element-plus/components/tooltip'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useSliderButton } from './composables'\nimport { sliderButtonEmits, sliderButtonProps } from './button'\nimport type { SliderButtonInitData } from './button'\n\ndefineOptions({\n  name: 'ElSliderButton',\n})\n\nconst props = defineProps(sliderButtonProps)\nconst emit = defineEmits(sliderButtonEmits)\n\nconst ns = useNamespace('slider')\n\nconst initData = reactive<SliderButtonInitData>({\n  hovering: false,\n  dragging: false,\n  isClick: false,\n  startX: 0,\n  currentX: 0,\n  startY: 0,\n  currentY: 0,\n  startPosition: 0,\n  newPosition: 0,\n  oldValue: props.modelValue,\n})\n\nconst tooltipPersistent = computed(() =>\n  !showTooltip.value ? false : persistent.value\n)\n\nconst {\n  disabled,\n  button,\n  tooltip,\n  showTooltip,\n  persistent,\n  tooltipVisible,\n  wrapperStyle,\n  formatValue,\n  handleMouseEnter,\n  handleMouseLeave,\n  onButtonDown,\n  onKeyDown,\n  setPosition,\n} = useSliderButton(props, initData, emit)\n\nconst { hovering, dragging } = toRefs(initData)\n\ndefineExpose({\n  onButtonDown,\n  onKeyDown,\n  setPosition,\n  hovering,\n  dragging,\n})\n</script>\n"],"mappings":";;;;;;mCAuCc;EACZA,IAAM;AACR;;;;;;;;;;IAKM,MAAAC,EAAA,GAAKC,YAAA,CAAa,QAAQ;IAEhC,MAAMC,QAAA,GAAWC,QAA+B;MAC9CC,QAAU;MACVC,QAAU;MACVC,OAAS;MACTC,MAAQ;MACRC,QAAU;MACVC,MAAQ;MACRC,QAAU;MACVC,aAAe;MACfC,WAAa;MACbC,QAAA,EAAUC,KAAM,CAAAC;IAAA,CACjB;IAED,MAAMC,iBAAoB,GAAAC,QAAA,QAAAC,WAAA,CAAAC,KAAA,WAAAC,UAAA,CAAAD,KAAA;IAAA,MACxB;MACFE,QAAA;MAEMC,MAAA;MACJC,OAAA;MACAL,WAAA;MACAE,UAAA;MACAI,cAAA;MACAC,YAAA;MACAC,WAAA;MACAC,gBAAA;MACAC,gBAAA;MACAC,YAAA;MACAC,SAAA;MACAC;IAAA,CACA,GAAAC,eAAA,CAAAlB,KAAA,EAAAZ,QAAA,EAAA+B,IAAA;IACA;MAAA7B,QAAA;MAAAC;IAAA,IAAA6B,MAAA,CAAAhC,QAAA;IACFiC,MAAI;MAEJN,YAAQ;MAEKC,SAAA;MACXC,WAAA;MACA3B,QAAA;MACAC;IAAA,CACA;IACA,QAAA+B,IAAA,EAAAC,MAAA;MACD,OAAAC,SAAA,IAAAC,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}