{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { defineComponent, computed, shallowRef, ref, onMounted, watch, onBeforeUnmount, openBlock, createElementBlock, normalizeStyle, renderSlot } from 'vue';\nimport { useMutationObserver } from '@vueuse/core';\nimport { watermarkProps } from './watermark.mjs';\nimport { reRendering, getStyleStr, getPixelRatio } from './utils.mjs';\nimport useClips, { FontGap } from './useClips.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isArray } from '@vue/shared';\nimport { isUndefined } from '../../../utils/types.mjs';\nconst __default__ = defineComponent({\n  name: \"ElWatermark\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: watermarkProps,\n  setup(__props) {\n    const props = __props;\n    const style = {\n      position: \"relative\"\n    };\n    const color = computed(() => {\n      var _a, _b;\n      return (_b = (_a = props.font) == null ? void 0 : _a.color) != null ? _b : \"rgba(0,0,0,.15)\";\n    });\n    const fontSize = computed(() => {\n      var _a, _b;\n      return (_b = (_a = props.font) == null ? void 0 : _a.fontSize) != null ? _b : 16;\n    });\n    const fontWeight = computed(() => {\n      var _a, _b;\n      return (_b = (_a = props.font) == null ? void 0 : _a.fontWeight) != null ? _b : \"normal\";\n    });\n    const fontStyle = computed(() => {\n      var _a, _b;\n      return (_b = (_a = props.font) == null ? void 0 : _a.fontStyle) != null ? _b : \"normal\";\n    });\n    const fontFamily = computed(() => {\n      var _a, _b;\n      return (_b = (_a = props.font) == null ? void 0 : _a.fontFamily) != null ? _b : \"sans-serif\";\n    });\n    const textAlign = computed(() => {\n      var _a, _b;\n      return (_b = (_a = props.font) == null ? void 0 : _a.textAlign) != null ? _b : \"center\";\n    });\n    const textBaseline = computed(() => {\n      var _a, _b;\n      return (_b = (_a = props.font) == null ? void 0 : _a.textBaseline) != null ? _b : \"hanging\";\n    });\n    const gapX = computed(() => props.gap[0]);\n    const gapY = computed(() => props.gap[1]);\n    const gapXCenter = computed(() => gapX.value / 2);\n    const gapYCenter = computed(() => gapY.value / 2);\n    const offsetLeft = computed(() => {\n      var _a, _b;\n      return (_b = (_a = props.offset) == null ? void 0 : _a[0]) != null ? _b : gapXCenter.value;\n    });\n    const offsetTop = computed(() => {\n      var _a, _b;\n      return (_b = (_a = props.offset) == null ? void 0 : _a[1]) != null ? _b : gapYCenter.value;\n    });\n    const getMarkStyle = () => {\n      const markStyle = {\n        zIndex: props.zIndex,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n        height: \"100%\",\n        pointerEvents: \"none\",\n        backgroundRepeat: \"repeat\"\n      };\n      let positionLeft = offsetLeft.value - gapXCenter.value;\n      let positionTop = offsetTop.value - gapYCenter.value;\n      if (positionLeft > 0) {\n        markStyle.left = `${positionLeft}px`;\n        markStyle.width = `calc(100% - ${positionLeft}px)`;\n        positionLeft = 0;\n      }\n      if (positionTop > 0) {\n        markStyle.top = `${positionTop}px`;\n        markStyle.height = `calc(100% - ${positionTop}px)`;\n        positionTop = 0;\n      }\n      markStyle.backgroundPosition = `${positionLeft}px ${positionTop}px`;\n      return markStyle;\n    };\n    const containerRef = shallowRef(null);\n    const watermarkRef = shallowRef();\n    const stopObservation = ref(false);\n    const destroyWatermark = () => {\n      if (watermarkRef.value) {\n        watermarkRef.value.remove();\n        watermarkRef.value = void 0;\n      }\n    };\n    const appendWatermark = (base64Url, markWidth) => {\n      var _a;\n      if (containerRef.value && watermarkRef.value) {\n        stopObservation.value = true;\n        watermarkRef.value.setAttribute(\"style\", getStyleStr({\n          ...getMarkStyle(),\n          backgroundImage: `url('${base64Url}')`,\n          backgroundSize: `${Math.floor(markWidth)}px`\n        }));\n        (_a = containerRef.value) == null ? void 0 : _a.append(watermarkRef.value);\n        setTimeout(() => {\n          stopObservation.value = false;\n        });\n      }\n    };\n    const getMarkSize = ctx => {\n      let defaultWidth = 120;\n      let defaultHeight = 64;\n      const {\n        image,\n        content,\n        width,\n        height,\n        rotate\n      } = props;\n      if (!image && ctx.measureText) {\n        ctx.font = `${Number(fontSize.value)}px ${fontFamily.value}`;\n        const contents = isArray(content) ? content : [content];\n        let maxWidth = 0;\n        let maxHeight = 0;\n        contents.forEach(item => {\n          const {\n            width: width2,\n            fontBoundingBoxAscent,\n            fontBoundingBoxDescent,\n            actualBoundingBoxAscent,\n            actualBoundingBoxDescent\n          } = ctx.measureText(item);\n          const height2 = isUndefined(fontBoundingBoxAscent) ? actualBoundingBoxAscent + actualBoundingBoxDescent : fontBoundingBoxAscent + fontBoundingBoxDescent;\n          if (width2 > maxWidth) maxWidth = Math.ceil(width2);\n          if (height2 > maxHeight) maxHeight = Math.ceil(height2);\n        });\n        defaultWidth = maxWidth;\n        defaultHeight = maxHeight * contents.length + (contents.length - 1) * FontGap;\n        const angle = Math.PI / 180 * Number(rotate);\n        const space = Math.ceil(Math.abs(Math.sin(angle) * defaultHeight) / 2);\n        defaultWidth += space;\n      }\n      return [width != null ? width : defaultWidth, height != null ? height : defaultHeight];\n    };\n    const getClips = useClips();\n    const renderWatermark = () => {\n      const canvas = document.createElement(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n      const image = props.image;\n      const content = props.content;\n      const rotate = props.rotate;\n      if (ctx) {\n        if (!watermarkRef.value) {\n          watermarkRef.value = document.createElement(\"div\");\n        }\n        const ratio = getPixelRatio();\n        const [markWidth, markHeight] = getMarkSize(ctx);\n        const drawCanvas = drawContent => {\n          const [textClips, clipWidth] = getClips(drawContent || \"\", rotate, ratio, markWidth, markHeight, {\n            color: color.value,\n            fontSize: fontSize.value,\n            fontStyle: fontStyle.value,\n            fontWeight: fontWeight.value,\n            fontFamily: fontFamily.value,\n            textAlign: textAlign.value,\n            textBaseline: textBaseline.value\n          }, gapX.value, gapY.value);\n          appendWatermark(textClips, clipWidth);\n        };\n        if (image) {\n          const img = new Image();\n          img.onload = () => {\n            drawCanvas(img);\n          };\n          img.onerror = () => {\n            drawCanvas(content);\n          };\n          img.crossOrigin = \"anonymous\";\n          img.referrerPolicy = \"no-referrer\";\n          img.src = image;\n        } else {\n          drawCanvas(content);\n        }\n      }\n    };\n    onMounted(() => {\n      renderWatermark();\n    });\n    watch(() => props, () => {\n      renderWatermark();\n    }, {\n      deep: true,\n      flush: \"post\"\n    });\n    onBeforeUnmount(() => {\n      destroyWatermark();\n    });\n    const onMutate = mutations => {\n      if (stopObservation.value) {\n        return;\n      }\n      mutations.forEach(mutation => {\n        if (reRendering(mutation, watermarkRef.value)) {\n          destroyWatermark();\n          renderWatermark();\n        }\n      });\n    };\n    useMutationObserver(containerRef, onMutate, {\n      attributes: true,\n      subtree: true,\n      childList: true\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"containerRef\",\n        ref: containerRef,\n        style: normalizeStyle([style])\n      }, [renderSlot(_ctx.$slots, \"default\")], 4);\n    };\n  }\n});\nvar Watermark = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"watermark.vue\"]]);\nexport { Watermark as default };","map":{"version":3,"names":["name","style","position","color","computed","_a","_b","props","font","fontSize","fontWeight","fontStyle","fontFamily","textAlign","textBaseline","gapX","gap","gapY","gapXCenter","value","gapYCenter","offsetLeft","offset","offsetTop","getMarkStyle","markStyle","zIndex","left","top","width","height","pointerEvents","backgroundRepeat","positionLeft","positionTop","backgroundPosition","containerRef","shallowRef","watermarkRef","stopObservation","ref","destroyWatermark","remove","appendWatermark","base64Url","markWidth","setAttribute","getStyleStr","backgroundImage","backgroundSize","Math","floor","append","setTimeout","getMarkSize","ctx","defaultWidth","defaultHeight","image","content","rotate","measureText","Number","contents","isArray","maxWidth","maxHeight","forEach","item","width2","fontBoundingBoxAscent","fontBoundingBoxDescent","actualBoundingBoxAscent","actualBoundingBoxDescent","height2","isUndefined","ceil","length","FontGap","angle","PI","space","abs","sin","getClips","useClips","renderWatermark","canvas","document","createElement","getContext","ratio","getPixelRatio","markHeight","drawCanvas","drawContent","textClips","clipWidth","img","Image","onload","onerror","crossOrigin","referrerPolicy","src","onMounted","watch","deep","flush","onBeforeUnmount","onMutate","mutations"],"sources":["../../../../../../packages/components/watermark/src/watermark.vue"],"sourcesContent":["<template>\n  <div ref=\"containerRef\" :style=\"[style]\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  onBeforeUnmount,\n  onMounted,\n  ref,\n  shallowRef,\n  watch,\n} from 'vue'\nimport { useMutationObserver } from '@vueuse/core'\nimport { isArray, isUndefined } from '@element-plus/utils'\nimport { watermarkProps } from './watermark'\nimport { getPixelRatio, getStyleStr, reRendering } from './utils'\nimport useClips, { FontGap } from './useClips'\nimport type { WatermarkProps } from './watermark'\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElWatermark',\n})\n\nconst style: CSSProperties = {\n  position: 'relative',\n}\n\nconst props = defineProps(watermarkProps)\nconst color = computed(() => props.font?.color ?? 'rgba(0,0,0,.15)')\nconst fontSize = computed(() => props.font?.fontSize ?? 16)\nconst fontWeight = computed(() => props.font?.fontWeight ?? 'normal')\nconst fontStyle = computed(() => props.font?.fontStyle ?? 'normal')\nconst fontFamily = computed(() => props.font?.fontFamily ?? 'sans-serif')\nconst textAlign = computed(() => props.font?.textAlign ?? 'center')\nconst textBaseline = computed(() => props.font?.textBaseline ?? 'hanging')\n\nconst gapX = computed(() => props.gap[0])\nconst gapY = computed(() => props.gap[1])\nconst gapXCenter = computed(() => gapX.value / 2)\nconst gapYCenter = computed(() => gapY.value / 2)\nconst offsetLeft = computed(() => props.offset?.[0] ?? gapXCenter.value)\nconst offsetTop = computed(() => props.offset?.[1] ?? gapYCenter.value)\n\nconst getMarkStyle = () => {\n  const markStyle: CSSProperties = {\n    zIndex: props.zIndex,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    pointerEvents: 'none',\n    backgroundRepeat: 'repeat',\n  }\n\n  /** Calculate the style of the offset */\n  let positionLeft = offsetLeft.value - gapXCenter.value\n  let positionTop = offsetTop.value - gapYCenter.value\n  if (positionLeft > 0) {\n    markStyle.left = `${positionLeft}px`\n    markStyle.width = `calc(100% - ${positionLeft}px)`\n    positionLeft = 0\n  }\n  if (positionTop > 0) {\n    markStyle.top = `${positionTop}px`\n    markStyle.height = `calc(100% - ${positionTop}px)`\n    positionTop = 0\n  }\n  markStyle.backgroundPosition = `${positionLeft}px ${positionTop}px`\n\n  return markStyle\n}\n\nconst containerRef = shallowRef<HTMLDivElement | null>(null)\nconst watermarkRef = shallowRef<HTMLDivElement>()\nconst stopObservation = ref(false)\n\nconst destroyWatermark = () => {\n  if (watermarkRef.value) {\n    watermarkRef.value.remove()\n    watermarkRef.value = undefined\n  }\n}\nconst appendWatermark = (base64Url: string, markWidth: number) => {\n  if (containerRef.value && watermarkRef.value) {\n    stopObservation.value = true\n    watermarkRef.value.setAttribute(\n      'style',\n      getStyleStr({\n        ...getMarkStyle(),\n        backgroundImage: `url('${base64Url}')`,\n        backgroundSize: `${Math.floor(markWidth)}px`,\n      })\n    )\n    containerRef.value?.append(watermarkRef.value)\n    // Delayed execution\n    setTimeout(() => {\n      stopObservation.value = false\n    })\n  }\n}\n\n/**\n * Get the width and height of the watermark. The default values are as follows\n * Image: [120, 64]; Content: It's calculated by content;\n */\nconst getMarkSize = (ctx: CanvasRenderingContext2D) => {\n  let defaultWidth = 120\n  let defaultHeight = 64\n\n  const { image, content, width, height, rotate } = props\n\n  if (!image && ctx.measureText) {\n    ctx.font = `${Number(fontSize.value)}px ${fontFamily.value}`\n\n    const contents = isArray(content) ? content : [content]\n    let maxWidth = 0\n    let maxHeight = 0\n\n    contents.forEach((item) => {\n      const {\n        width,\n        fontBoundingBoxAscent,\n        fontBoundingBoxDescent,\n        actualBoundingBoxAscent,\n        actualBoundingBoxDescent,\n      } = ctx.measureText(item!)\n      // Using `actualBoundingBoxAscent` to be compatible with lower version browsers (eg: Firefox < 116)\n      const height = isUndefined(fontBoundingBoxAscent)\n        ? actualBoundingBoxAscent + actualBoundingBoxDescent\n        : fontBoundingBoxAscent + fontBoundingBoxDescent\n\n      if (width > maxWidth) maxWidth = Math.ceil(width)\n      if (height > maxHeight) maxHeight = Math.ceil(height)\n    })\n\n    defaultWidth = maxWidth\n    defaultHeight =\n      maxHeight * contents.length + (contents.length - 1) * FontGap\n\n    const angle = (Math.PI / 180) * Number(rotate)\n    const space = Math.ceil(Math.abs(Math.sin(angle) * defaultHeight) / 2)\n\n    defaultWidth += space\n  }\n\n  return [width ?? defaultWidth, height ?? defaultHeight] as const\n}\n\nconst getClips = useClips()\n\nconst renderWatermark = () => {\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  const image = props.image\n  const content = props.content\n  const rotate = props.rotate\n\n  if (ctx) {\n    if (!watermarkRef.value) {\n      watermarkRef.value = document.createElement('div')\n    }\n\n    const ratio = getPixelRatio()\n    const [markWidth, markHeight] = getMarkSize(ctx)\n\n    const drawCanvas = (\n      drawContent?: NonNullable<WatermarkProps['content']> | HTMLImageElement\n    ) => {\n      const [textClips, clipWidth] = getClips(\n        drawContent || '',\n        rotate,\n        ratio,\n        markWidth,\n        markHeight,\n        {\n          color: color.value,\n          fontSize: fontSize.value,\n          fontStyle: fontStyle.value,\n          fontWeight: fontWeight.value,\n          fontFamily: fontFamily.value,\n          textAlign: textAlign.value,\n          textBaseline: textBaseline.value,\n        },\n        gapX.value,\n        gapY.value\n      )\n\n      appendWatermark(textClips, clipWidth)\n    }\n\n    if (image) {\n      const img = new Image()\n      img.onload = () => {\n        drawCanvas(img)\n      }\n      img.onerror = () => {\n        drawCanvas(content)\n      }\n      img.crossOrigin = 'anonymous'\n      img.referrerPolicy = 'no-referrer'\n      img.src = image\n    } else {\n      drawCanvas(content)\n    }\n  }\n}\n\nonMounted(() => {\n  renderWatermark()\n})\n\nwatch(\n  () => props,\n  () => {\n    renderWatermark()\n  },\n  {\n    deep: true,\n    flush: 'post',\n  }\n)\n\nonBeforeUnmount(() => {\n  destroyWatermark()\n})\n\nconst onMutate = (mutations: MutationRecord[]) => {\n  if (stopObservation.value) {\n    return\n  }\n  mutations.forEach((mutation) => {\n    if (reRendering(mutation, watermarkRef.value)) {\n      destroyWatermark()\n      renderWatermark()\n    }\n  })\n}\n\nuseMutationObserver(containerRef, onMutate, {\n  attributes: true,\n  subtree: true,\n  childList: true,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}